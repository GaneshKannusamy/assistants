name: Rust CI

on:
  push:
    paths:
      - "**.rs"
      - "**.toml"
      - "**/workflows/**.yml"
      - "**/docker/**"
  # pull_request: # ! leaking creds
  #   paths:
  #     - "**.rs"
  #     - "**.toml"
  #     - "**/workflows/**.yml"
  #     - "**/docker/**"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Start Docker containers
        run: |
          cp .env.example .env
          docker compose -f docker/docker-compose.yml up -d

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:secret@localhost:5432/mydatabase
          REDIS_URL: redis://127.0.0.1/
          S3_ENDPOINT: http://localhost:9000
          S3_ACCESS_KEY: minioadmin
          S3_SECRET_KEY: minioadmin
          S3_BUCKET_NAME: mybucket
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }} # TODO: dont think these api keys are used
          MODEL_API_KEY: ${{ secrets.MODEL_API_KEY }}
          MODEL_URL: ${{ secrets.MODEL_URL }}
          TEST_MODEL_NAME: ${{ secrets.TEST_MODEL_NAME }}
        run: RUST_TEST_THREADS=1 cargo test

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Release')

    steps:
      - uses: actions/checkout@v2

      # Cache Rust dependencies
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo target directory
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # This step builds the Rust binaries
      - name: Build Rust binaries
        run: |
          cargo build --release --bin hal-9100-executor
          cargo build --release --bin hal-9100
          # Ensure the target directory structure is correct for the Docker build context
          mkdir -p ./docker/target/release
          cp ./target/release/hal-9100-executor ./docker/target/release/
          cp ./target/release/hal-9100 ./docker/target/release/
        env:
          SQLX_OFFLINE: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.event.head_commit.message }}
          regex: "^Release ([^ ]+)"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/hal-9100:${{ steps.regex-match.outputs.group1 }}
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm64/v8
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  docker-build-code-interpreter:
    needs: test
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'Release')

    steps:
      - uses: actions/checkout@v2

      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.event.head_commit.message }}
          regex: "^Release ([^ ]+)"

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/hal-9100-code-interpreter:${{ steps.regex-match.outputs.group1 }}, ${{ secrets.DOCKERHUB_USERNAME }}/hal-9100-code-interpreter:${{ steps.regex-match.outputs.group1 }}
          file: docker/Dockerfile.code-interpreter
          platforms: linux/amd64,linux/arm64,linux/arm64/v8
